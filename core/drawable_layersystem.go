// Code generated by ecs https://github.com/gabstv/ecs; DO NOT EDIT.

package core

import (
    
    "sort"

    "github.com/gabstv/ecs/v2"
    
)









const uuidDrawLayerDrawableSystem = "CBBC8DB4-4866-413E-A7A9-250A3C9ECDDC"

type viewDrawLayerDrawableSystem struct {
    entities []VIDrawLayerDrawableSystem
    world ecs.BaseWorld
    
}

type VIDrawLayerDrawableSystem struct {
    Entity ecs.Entity
    
    Drawable *Drawable 
    
    DrawLayer *DrawLayer 
    
}

type sortedVIDrawLayerDrawableSystems []VIDrawLayerDrawableSystem
func (a sortedVIDrawLayerDrawableSystems) Len() int           { return len(a) }
func (a sortedVIDrawLayerDrawableSystems) Swap(i, j int)      { a[i], a[j] = a[j], a[i] }
func (a sortedVIDrawLayerDrawableSystems) Less(i, j int) bool { return a[i].Entity < a[j].Entity }

func newviewDrawLayerDrawableSystem(w ecs.BaseWorld) *viewDrawLayerDrawableSystem {
    return &viewDrawLayerDrawableSystem{
        entities: make([]VIDrawLayerDrawableSystem, 0),
        world: w,
    }
}

func (v *viewDrawLayerDrawableSystem) Matches() []VIDrawLayerDrawableSystem {
    
    return v.entities
    
}

func (v *viewDrawLayerDrawableSystem) indexof(e ecs.Entity) int {
    i := sort.Search(len(v.entities), func(i int) bool { return v.entities[i].Entity >= e })
    if i < len(v.entities) && v.entities[i].Entity == e {
        return i
    }
    return -1
}

// Fetch a specific entity
func (v *viewDrawLayerDrawableSystem) Fetch(e ecs.Entity) (data VIDrawLayerDrawableSystem, ok bool) {
    
    i := v.indexof(e)
    if i == -1 {
        return VIDrawLayerDrawableSystem{}, false
    }
    return v.entities[i], true
}

func (v *viewDrawLayerDrawableSystem) Add(e ecs.Entity) bool {
    
    
    // MUST NOT add an Entity twice:
    if i := v.indexof(e); i > -1 {
        return false
    }
    v.entities = append(v.entities, VIDrawLayerDrawableSystem{
        Entity: e,
        Drawable: GetDrawableComponent(v.world).Data(e),
DrawLayer: GetDrawLayerComponent(v.world).Data(e),

    })
    if len(v.entities) > 1 {
        if v.entities[len(v.entities)-1].Entity < v.entities[len(v.entities)-2].Entity {
            sort.Sort(sortedVIDrawLayerDrawableSystems(v.entities))
        }
    }
    return true
}

func (v *viewDrawLayerDrawableSystem) Remove(e ecs.Entity) bool {
    
    
    if i := v.indexof(e); i != -1 {

        v.entities = append(v.entities[:i], v.entities[i+1:]...)
        return true
    }
    return false
}

func (v *viewDrawLayerDrawableSystem) clearpointers() {
    
    
    for i := range v.entities {
        e := v.entities[i].Entity
        
        v.entities[i].Drawable = nil
        
        v.entities[i].DrawLayer = nil
        
        _ = e
    }
}

func (v *viewDrawLayerDrawableSystem) rescan() {
    
    
    for i := range v.entities {
        e := v.entities[i].Entity
        
        v.entities[i].Drawable = GetDrawableComponent(v.world).Data(e)
        
        v.entities[i].DrawLayer = GetDrawLayerComponent(v.world).Data(e)
        
        _ = e
        
    }
}

// DrawLayerDrawableSystem implements ecs.BaseSystem
type DrawLayerDrawableSystem struct {
    initialized bool
    world       ecs.BaseWorld
    view        *viewDrawLayerDrawableSystem
    enabled     bool
    
    layers *drawLayerDrawers
    
}

// GetDrawLayerDrawableSystem returns the instance of the system in a World
func GetDrawLayerDrawableSystem(w ecs.BaseWorld) *DrawLayerDrawableSystem {
    return w.S(uuidDrawLayerDrawableSystem).(*DrawLayerDrawableSystem)
}

// Enable system
func (s *DrawLayerDrawableSystem) Enable() {
    s.enabled = true
}

// Disable system
func (s *DrawLayerDrawableSystem) Disable() {
    s.enabled = false
}

// Enabled checks if enabled
func (s *DrawLayerDrawableSystem) Enabled() bool {
    return s.enabled
}

// UUID implements ecs.BaseSystem
func (DrawLayerDrawableSystem) UUID() string {
    return "CBBC8DB4-4866-413E-A7A9-250A3C9ECDDC"
}

func (DrawLayerDrawableSystem) Name() string {
    return "DrawLayerDrawableSystem"
}

// ensure matchfn
var _ ecs.MatchFn = matchDrawLayerDrawableSystem

// ensure resizematchfn
var _ ecs.MatchFn = resizematchDrawLayerDrawableSystem

func (s *DrawLayerDrawableSystem) match(eflag ecs.Flag) bool {
    return matchDrawLayerDrawableSystem(eflag, s.world)
}

func (s *DrawLayerDrawableSystem) resizematch(eflag ecs.Flag) bool {
    return resizematchDrawLayerDrawableSystem(eflag, s.world)
}

func (s *DrawLayerDrawableSystem) ComponentAdded(e ecs.Entity, eflag ecs.Flag) {
    if s.match(eflag) {
        if s.view.Add(e) {
            // TODO: dispatch event that this entity was added to this system
            s.onEntityAdded(e)
        }
    } else {
        if s.view.Remove(e) {
            // TODO: dispatch event that this entity was removed from this system
            s.onEntityRemoved(e)
        }
    }
}

func (s *DrawLayerDrawableSystem) ComponentRemoved(e ecs.Entity, eflag ecs.Flag) {
    if s.match(eflag) {
        if s.view.Add(e) {
            // TODO: dispatch event that this entity was added to this system
            s.onEntityAdded(e)
        }
    } else {
        if s.view.Remove(e) {
            // TODO: dispatch event that this entity was removed from this system
            s.onEntityRemoved(e)
        }
    }
}

func (s *DrawLayerDrawableSystem) ComponentResized(cflag ecs.Flag) {
    if s.resizematch(cflag) {
        s.view.rescan()
        s.afterCompResize()
    }
}

func (s *DrawLayerDrawableSystem) ComponentWillResize(cflag ecs.Flag) {
    if s.resizematch(cflag) {
        s.beforeCompResize()
        s.view.clearpointers()
    }
}

func (s *DrawLayerDrawableSystem) V() *viewDrawLayerDrawableSystem {
    return s.view
}

func (*DrawLayerDrawableSystem) Priority() int64 {
    return -10
}

func (s *DrawLayerDrawableSystem) Setup(w ecs.BaseWorld) {
    if s.initialized {
        panic("DrawLayerDrawableSystem called Setup() more than once")
    }
    s.view = newviewDrawLayerDrawableSystem(w)
    s.world = w
    s.enabled = true
    s.initialized = true
    s.setupVars()
}


func init() {
    ecs.RegisterSystem(func() ecs.BaseSystem {
        return &DrawLayerDrawableSystem{}
    })
}
