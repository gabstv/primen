// Code generated by ecs https://github.com/gabstv/ecs; DO NOT EDIT.

package core

import (
    
    "sort"

    "github.com/gabstv/ecs/v2"
    
)









const uuidFunctionSystem = "72828866-8D03-4073-82C6-D127A6633521"

type viewFunctionSystem struct {
    entities []VIFunctionSystem
    world ecs.BaseWorld
    
}

type VIFunctionSystem struct {
    Entity ecs.Entity
    
    Function *Function 
    
}

type sortedVIFunctionSystems []VIFunctionSystem
func (a sortedVIFunctionSystems) Len() int           { return len(a) }
func (a sortedVIFunctionSystems) Swap(i, j int)      { a[i], a[j] = a[j], a[i] }
func (a sortedVIFunctionSystems) Less(i, j int) bool { return a[i].Entity < a[j].Entity }

func newviewFunctionSystem(w ecs.BaseWorld) *viewFunctionSystem {
    return &viewFunctionSystem{
        entities: make([]VIFunctionSystem, 0),
        world: w,
    }
}

func (v *viewFunctionSystem) Matches() []VIFunctionSystem {
    
    return v.entities
    
}

func (v *viewFunctionSystem) indexof(e ecs.Entity) int {
    i := sort.Search(len(v.entities), func(i int) bool { return v.entities[i].Entity >= e })
    if i < len(v.entities) && v.entities[i].Entity == e {
        return i
    }
    return -1
}

// Fetch a specific entity
func (v *viewFunctionSystem) Fetch(e ecs.Entity) (data VIFunctionSystem, ok bool) {
    
    i := v.indexof(e)
    if i == -1 {
        return VIFunctionSystem{}, false
    }
    return v.entities[i], true
}

func (v *viewFunctionSystem) Add(e ecs.Entity) bool {
    
    
    // MUST NOT add an Entity twice:
    if i := v.indexof(e); i > -1 {
        return false
    }
    v.entities = append(v.entities, VIFunctionSystem{
        Entity: e,
        Function: GetFunctionComponent(v.world).Data(e),

    })
    if len(v.entities) > 1 {
        if v.entities[len(v.entities)-1].Entity < v.entities[len(v.entities)-2].Entity {
            sort.Sort(sortedVIFunctionSystems(v.entities))
        }
    }
    return true
}

func (v *viewFunctionSystem) Remove(e ecs.Entity) bool {
    
    
    if i := v.indexof(e); i != -1 {

        v.entities = append(v.entities[:i], v.entities[i+1:]...)
        return true
    }
    return false
}

func (v *viewFunctionSystem) clearpointers() {
    
    
    for i := range v.entities {
        e := v.entities[i].Entity
        
        v.entities[i].Function = nil
        
        _ = e
    }
}

func (v *viewFunctionSystem) rescan() {
    
    
    for i := range v.entities {
        e := v.entities[i].Entity
        
        v.entities[i].Function = GetFunctionComponent(v.world).Data(e)
        
        _ = e
        
    }
}

// FunctionSystem implements ecs.BaseSystem
type FunctionSystem struct {
    initialized bool
    world       ecs.BaseWorld
    view        *viewFunctionSystem
    enabled     bool
    
}

// GetFunctionSystem returns the instance of the system in a World
func GetFunctionSystem(w ecs.BaseWorld) *FunctionSystem {
    return w.S(uuidFunctionSystem).(*FunctionSystem)
}

// Enable system
func (s *FunctionSystem) Enable() {
    s.enabled = true
}

// Disable system
func (s *FunctionSystem) Disable() {
    s.enabled = false
}

// Enabled checks if enabled
func (s *FunctionSystem) Enabled() bool {
    return s.enabled
}

// UUID implements ecs.BaseSystem
func (FunctionSystem) UUID() string {
    return "72828866-8D03-4073-82C6-D127A6633521"
}

func (FunctionSystem) Name() string {
    return "FunctionSystem"
}

// ensure matchfn
var _ ecs.MatchFn = matchFunctionSystem

// ensure resizematchfn
var _ ecs.MatchFn = resizematchFunctionSystem

func (s *FunctionSystem) match(eflag ecs.Flag) bool {
    return matchFunctionSystem(eflag, s.world)
}

func (s *FunctionSystem) resizematch(eflag ecs.Flag) bool {
    return resizematchFunctionSystem(eflag, s.world)
}

func (s *FunctionSystem) ComponentAdded(e ecs.Entity, eflag ecs.Flag) {
    if s.match(eflag) {
        if s.view.Add(e) {
            // TODO: dispatch event that this entity was added to this system
            
        }
    } else {
        if s.view.Remove(e) {
            // TODO: dispatch event that this entity was removed from this system
            
        }
    }
}

func (s *FunctionSystem) ComponentRemoved(e ecs.Entity, eflag ecs.Flag) {
    if s.match(eflag) {
        if s.view.Add(e) {
            // TODO: dispatch event that this entity was added to this system
            
        }
    } else {
        if s.view.Remove(e) {
            // TODO: dispatch event that this entity was removed from this system
            
        }
    }
}

func (s *FunctionSystem) ComponentResized(cflag ecs.Flag) {
    if s.resizematch(cflag) {
        s.view.rescan()
        
    }
}

func (s *FunctionSystem) ComponentWillResize(cflag ecs.Flag) {
    if s.resizematch(cflag) {
        
        s.view.clearpointers()
    }
}

func (s *FunctionSystem) V() *viewFunctionSystem {
    return s.view
}

func (*FunctionSystem) Priority() int64 {
    return -1000
}

func (s *FunctionSystem) Setup(w ecs.BaseWorld) {
    if s.initialized {
        panic("FunctionSystem called Setup() more than once")
    }
    s.view = newviewFunctionSystem(w)
    s.world = w
    s.enabled = true
    s.initialized = true
    
}


func init() {
    ecs.RegisterSystem(func() ecs.BaseSystem {
        return &FunctionSystem{}
    })
}
