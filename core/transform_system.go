// Code generated by ecs https://github.com/gabstv/ecs; DO NOT EDIT.

package core

import (
    
    "sort"

    "github.com/gabstv/ecs/v2"
    
)









const uuidTransformSystem = "486FA1E8-4C45-48F2-AD8A-02D84C4426C9"

type viewTransformSystem struct {
    entities []VITransformSystem
    world ecs.BaseWorld
    
}

type VITransformSystem struct {
    Entity ecs.Entity
    
    Transform *Transform 
    
}

type sortedVITransformSystems []VITransformSystem
func (a sortedVITransformSystems) Len() int           { return len(a) }
func (a sortedVITransformSystems) Swap(i, j int)      { a[i], a[j] = a[j], a[i] }
func (a sortedVITransformSystems) Less(i, j int) bool { return a[i].Entity < a[j].Entity }

func newviewTransformSystem(w ecs.BaseWorld) *viewTransformSystem {
    return &viewTransformSystem{
        entities: make([]VITransformSystem, 0),
        world: w,
    }
}

func (v *viewTransformSystem) Matches() []VITransformSystem {
    
    return v.entities
    
}

func (v *viewTransformSystem) indexof(e ecs.Entity) int {
    i := sort.Search(len(v.entities), func(i int) bool { return v.entities[i].Entity >= e })
    if i < len(v.entities) && v.entities[i].Entity == e {
        return i
    }
    return -1
}

// Fetch a specific entity
func (v *viewTransformSystem) Fetch(e ecs.Entity) (data VITransformSystem, ok bool) {
    
    i := v.indexof(e)
    if i == -1 {
        return VITransformSystem{}, false
    }
    return v.entities[i], true
}

func (v *viewTransformSystem) Add(e ecs.Entity) bool {
    
    
    // MUST NOT add an Entity twice:
    if i := v.indexof(e); i > -1 {
        return false
    }
    v.entities = append(v.entities, VITransformSystem{
        Entity: e,
        Transform: GetTransformComponent(v.world).Data(e),

    })
    if len(v.entities) > 1 {
        if v.entities[len(v.entities)-1].Entity < v.entities[len(v.entities)-2].Entity {
            sort.Sort(sortedVITransformSystems(v.entities))
        }
    }
    return true
}

func (v *viewTransformSystem) Remove(e ecs.Entity) bool {
    
    
    if i := v.indexof(e); i != -1 {

        v.entities = append(v.entities[:i], v.entities[i+1:]...)
        return true
    }
    return false
}

func (v *viewTransformSystem) clearpointers() {
    
    
    for i := range v.entities {
        e := v.entities[i].Entity
        
        v.entities[i].Transform = nil
        
        _ = e
    }
}

func (v *viewTransformSystem) rescan() {
    
    
    for i := range v.entities {
        e := v.entities[i].Entity
        
        v.entities[i].Transform = GetTransformComponent(v.world).Data(e)
        
        _ = e
        
    }
}

// TransformSystem implements ecs.BaseSystem
type TransformSystem struct {
    initialized bool
    world       ecs.BaseWorld
    view        *viewTransformSystem
    enabled     bool
    
    tick uint64
    
}

// GetTransformSystem returns the instance of the system in a World
func GetTransformSystem(w ecs.BaseWorld) *TransformSystem {
    return w.S(uuidTransformSystem).(*TransformSystem)
}

// Enable system
func (s *TransformSystem) Enable() {
    s.enabled = true
}

// Disable system
func (s *TransformSystem) Disable() {
    s.enabled = false
}

// Enabled checks if enabled
func (s *TransformSystem) Enabled() bool {
    return s.enabled
}

// UUID implements ecs.BaseSystem
func (TransformSystem) UUID() string {
    return "486FA1E8-4C45-48F2-AD8A-02D84C4426C9"
}

func (TransformSystem) Name() string {
    return "TransformSystem"
}

// ensure matchfn
var _ ecs.MatchFn = matchTransformSystem

// ensure resizematchfn
var _ ecs.MatchFn = resizematchTransformSystem

func (s *TransformSystem) match(eflag ecs.Flag) bool {
    return matchTransformSystem(eflag, s.world)
}

func (s *TransformSystem) resizematch(eflag ecs.Flag) bool {
    return resizematchTransformSystem(eflag, s.world)
}

func (s *TransformSystem) ComponentAdded(e ecs.Entity, eflag ecs.Flag) {
    if s.match(eflag) {
        if s.view.Add(e) {
            // TODO: dispatch event that this entity was added to this system
            s.onEntityAdded(e)
        }
    } else {
        if s.view.Remove(e) {
            // TODO: dispatch event that this entity was removed from this system
            s.onEntityRemoved(e)
        }
    }
}

func (s *TransformSystem) ComponentRemoved(e ecs.Entity, eflag ecs.Flag) {
    if s.match(eflag) {
        if s.view.Add(e) {
            // TODO: dispatch event that this entity was added to this system
            s.onEntityAdded(e)
        }
    } else {
        if s.view.Remove(e) {
            // TODO: dispatch event that this entity was removed from this system
            s.onEntityRemoved(e)
        }
    }
}

func (s *TransformSystem) ComponentResized(cflag ecs.Flag) {
    if s.resizematch(cflag) {
        s.view.rescan()
        
    }
}

func (s *TransformSystem) ComponentWillResize(cflag ecs.Flag) {
    if s.resizematch(cflag) {
        
        s.view.clearpointers()
    }
}

func (s *TransformSystem) V() *viewTransformSystem {
    return s.view
}

func (*TransformSystem) Priority() int64 {
    return 100
}

func (s *TransformSystem) Setup(w ecs.BaseWorld) {
    if s.initialized {
        panic("TransformSystem called Setup() more than once")
    }
    s.view = newviewTransformSystem(w)
    s.world = w
    s.enabled = true
    s.initialized = true
    s.setupTransforms()
}


func init() {
    ecs.RegisterSystem(func() ecs.BaseSystem {
        return &TransformSystem{}
    })
}
